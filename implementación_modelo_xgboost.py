# -*- coding: utf-8 -*-
"""Implementaci√≥n Modelo XGBoost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19rSdLt04YQyo_cZ54ZGD69a6Jg8-3EWP
"""

import numpy                 as np
import pandas                as pd
import matplotlib.pyplot     as plt
import seaborn               as sns
from scipy                   import stats
from sklearn.ensemble        import GradientBoostingRegressor
from sklearn.metrics         import mean_squared_error
from sklearn.preprocessing   import StandardScaler
from xgboost                 import XGBRegressor
import warnings
import pickle
warnings.filterwarnings('once')

df_updated = pd.read_excel('C:/Users/elkcuepa/Documents/Proyecto Modelo ICETEX pREJUR/matriz_input_prej.xlsx')

modelo_xg_activa = 'C:/Users/elkcuepa/modelo_xg_activa.pkl'
modelo_xg_fondos = 'C:/Users/elkcuepa/modelo_xg_fondos.pkl'

activa = df_updated['LINEA'] == 'LINEA_ACTIVA'
fondos = df_updated['LINEA'] == 'FONDOS'
icetex_prej_activa = df_updated[activa]
icetex_prej_fondos = df_updated[fondos]
icetex_prej_activa = icetex_prej_activa.drop(columns='LINEA')
icetex_prej_fondos = icetex_prej_fondos.drop(columns='LINEA')

predict_final_activa = icetex_prej_activa.iloc[:, 0:18]
predict_final_fondos = icetex_prej_fondos.iloc[:, 0:18]

predict_final_activa= predict_final_activa.drop(columns='TIEMPO_PAGO_PROM')
predict_final_fondos= predict_final_fondos.drop(columns='TIEMPO_PAGO_PROM')

Estandar = StandardScaler()
predict_final_activa= Estandar.fit_transform(predict_final_activa)
predict_final1 = pd.DataFrame(predict_final_activa)
predict_final_fondos= Estandar.fit_transform(predict_final_fondos)
predict_final2 = pd.DataFrame(predict_final_fondos)

with open(modelo_xg_activa, 'rb') as file:
    modelo_xg_activa = pickle.load(file)

with open(modelo_xg_fondos, 'rb') as file:
    modelo_xg_fondos = pickle.load(file)

icetex_prej_activa['TIEMPO_PROXIMO_PAGO'] = modelo_xg_activa.predict(predict_final_activa)
icetex_prej_fondos['TIEMPO_PROXIMO_PAGO'] = modelo_xg_fondos.predict(predict_final_fondos)

df2_all = [icetex_prej_activa, icetex_prej_fondos]
df_updated = pd.concat(df2_all, axis=0)

temp = df_updated['TIEMPO_PROXIMO_PAGO'].apply(np.ceil).apply(lambda x: pd.Timedelta(x, unit='D'))

df_updated['FECHA_PROXIMO_PAGO'] = df_updated['FECHA_ULTIMO_PAGO'] + temp

IDSOLICITUD = df_updated['IDSOLICITUD']
df_updated.drop(labels=['IDSOLICITUD'], axis=1,inplace = True)
df_updated.insert(0, 'IDSOLICITUD', IDSOLICITUD)

df_updated.to_excel('C:/Users/elkcuepa/Documents/Proyecto Modelo ICETEX pREJUR/matriz_output_prej.xlsx', index = False, header=True)